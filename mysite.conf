# Nginx-conf-for-a-good-security
# By Ismaël SAKI-SIMON (https://github.com/ism8el/nginx-conf-for-a-good-security)

server {
    #listen 0.0.0.0:80;
    server_name mysite.com;
    listen unix:/var/run/nginx.sock;
    allow unix:;
    deny all;
      
    #For bypass 405 errors
    error_page 405 = $uri;	
    root /var/www/html;
    
    # Add index.php to the list if you are using PHP
    index index.php index.html index.htm;

    error_page 403 /403.html;
    error_page 404 /404.html;
    error_page 405 /405.html;

    # Deny access to version control system directories.
    location ~ /\.svn|/\.git {
        deny all;
        internal;
    }

    # deny access to log files
    location ~ /\_log|/\.log {
        deny all;
        internal;
    }

    # Deny access if file begin with "."
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to non common files
    location ~* /.+\.(markdown|md|twig|yaml|yml|ini|conf|txt|bin|cfg|old|bak|exemple|example|json|jsonc|xml|log|git|sql|tar|gz|default)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny all grunt, package files
    location ~* (Gruntfile|package)\.(json|jsonc)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny all composer files
    location ~* composer\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Add Cache-Control header for static content files
    location ~* \.(jpg|jpeg|gif|css|png|js|ico|html|woff|woff2)$ {
        log_not_found off;
        add_header Cache-Control "public, max-age=604800";
    }

    # Block all access with a Tor2Web header
    if ($http_x_tor2web) {
        return 401;
    }

    # Allow just the methods GET, HEAD and POST
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
        return 403;
    }

    # Authentification for access
    #location /admin_pannel/ {
    #    auth_basic "Restricted Access!"; 
    #    auth_basic_user_file /var/www/html/.htpasswd;
    #}

    autoindex_localtime on;
    more_clear_headers 'Server:*';
    more_clear_headers 'X-Page-Speed:*'; 
    more_clear_headers 'Vary*';
    more_clear_headers 'captcha-fails*';

    location / {
    # First attempt to serve request as file, then
    # as directory, then fall back to displaying a 404.
    try_files $uri $uri/ =404;
    aio threads;
        proxy_cookie_path / "/; secure; HttpOnly; SameSite=strict";
    }

    # pass PHP scripts to FastCGI server
    #
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        # With php-fpm (or other unix sockets):
        fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        # With php-cgi (or other tcp sockets):
        #fastcgi_pass 127.0.0.1:9000;
    }

    # deny access to .htaccess files, if Apache's document root
    location ~ /\.ht {
        deny all;
    }

    ############### FOR NAXSI [BEGIN] ###############
    # Enable NAXSI
    #SecRulesEnabled;
    #LearningMode;
    #include "/etc/naxsi/naxsi_whitelist.rules";

    # Define where blocked requests go
    #DeniedUrl "/403.html";

    # CheckRules, determining when NAXSI needs to take action
    #CheckRule "$SQL >= 8" LOG;
    #CheckRule "$RFI >= 8" LOG;
    #CheckRule "$TRAVERSAL >= 4" LOG;
    #CheckRule "$EVADE >= 4" LOG;
    #CheckRule "$XSS >= 8" LOG;	

    # Don’t forget the error_log, where blocked requests are logged
    #error_log /var/log/nginx/naxsi.log;
    ############### FOR NAXSI [END] ###############

}
